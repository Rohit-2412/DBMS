// 8 august
// SQL is not case sensitive
CREATE TABLE table_name
(
col_name1 data_type(size) constraint_name,
col_name2 data_type(size) constraint_name,
col_name3 data_type(size) constraint_name,
...
);

// DDL = Data Definition Language
// command to create table

CREATE TABLE student_table(
Regno number(12),
name varchar(20),
section varchar(10),
address varchar(25),
cgpa number(4,2),
rollnumber number(4)
);

int, number, char, varchar, varchar2 {constraints} = optional
desc table_name; == for describing the table
Example:
desc student_table;
// select and run one particular query at a time

// DML = Data Manipulation Language
// query to insert data

insert into student_table values(100,'rohit','IT','delhi',8,4);
insert into student_table values(101,'student 2','IT','uttar pradesh',8,4);

// query to show all data
SELECT * from student_table;

// CODE
CREATE TABLE student_table(
Regno number(12),
Name varchar(20),
Section varchar(10),
Address varchar(25),
CGPA number(4,2),
Roll_number number(4)
);

desc student_table;

insert into student_table values(100,'rohit','IT','delhi',8,4);
insert into student_table values(101,'amit','IT','uttar pradesh',8,4);

SELECT * from student_table;

// 11 AUGUST
CREATE TABLE Person(
P_id number(5) PRIMARY KEY,
first_name varchar(20) UNIQUE NOT NULL,
last_name varchar(20) NOT NULL,
address varchar(25) NOT NULL,
age number(2) NOT NULL
);

// DML
insert into Person values(10,'ram','sharma','punjab',20);
insert into Person values(11,'ramesh','sharma','punjab',22);
insert into Person values(12,'mahesh','singh','ludhiana',21);
insert into Person values(13,'shyam','malik','orissa',30);
insert into Person values(14,'amit','verma','bihar',50);
insert into Person values(15,'amitabh','pandey','punjab',25);
insert into Person values(16,'sumit','sharma','punjab',50);

// DML Command: Delete
Delete from Person where P_id = 6;
Delete from Person where P_id = 11;

// DDL Command: DROP

DROP TABLE table_name; {syntax}
DROP TABLE Person;

// EMPLOYEE TABLE 7 cols

CREATE TABLE employee_table(
emp_no number(12) PRIMARY KEY,
Name varchar(25) NOT NULL,
department varchar(25) NOT NULL,
specialization varchar(50) NOT NULL,
Address varchar(25),
Salary number(10) NOT NULL,
dob varchar(15) NOT NULL,
experience number(5)
);

insert into employee_table values(10,'ram','CSE','artificial intelligence','punjab',10000,'1/8/2008',10);
insert into employee_table values(11,'ramesh','CSE','artificial intelligence','punjab',1800,'1/8/2008',15);
insert into employee_table values(12,'mohan','mec','isometric design','punjab',14000,'1/8/2008',5);
insert into employee_table values(13,'pawan','ece','vlsi engineer','punjab',9000,'1/8/1988',2);
insert into employee_table values(14,'param','phy','laser engineer','punjab',9000,'1/8/1985',1);
insert into employee_table values(15,'sohaib','che','scientist','punjab',1100,'1/8/1258',20);
insert into employee_table values(16,'malik','bio','zoologist','web developer',15000,'1/8/1995',13);
insert into employee_table values(17,'shyam','int','networking','punjab',12000,'1/8/1485',20);

Select * from employee_table;
delete from employee_table where emp_no = 10;

// FOREIGN KEY Constraint

// Person Table
CREATE TABLE Person(
P_id number(5) PRIMARY KEY,
name varchar(20) UNIQUE NOT NULL,
address varchar(25) NOT NULL,
age number(2) NOT NULL
);

insert into Person values(1,'ram','punjab',20);
insert into Person values(2,'ramesh','punjab',22);
insert into Person values(3,'mahesh','ludhiana',21);

select * from Person;

// Order table
CREATE TABLE Order1(
O_id int PRIMARY KEY,
O_no int NOT NULL,
P_id int,
FOREIGN KEY (P_id) REFERENCES Person(P_id)
);
FOREIGN KEY col_name {in Child table} REFERENCES table_name(in Parent Table)
FOREIGN KEY (P_id) REFERENCES Person(P_id)

// Query
insert into Order1 values(100,10,1);
insert into Order1 values(101,11,2);
insert into Order1 values(102,12,2);
insert into Order1 values(103,13,3);

insert into Order1 values((104,14,3),
(105,15,3),
(106,16,3));

select * from Order1;

Base table = Parent table
Reference table = child table

Deletion is not allowed in Base table
Insertion of values which are not present in Base table is not allowed

// Check constraint
CREATE TABLE Course(
course_id int PRIMARY KEY,
course_name varchar(30) NOT NULL,
course_duration number(5) Check (course_duration > 2),
course_teacher varchar(20) NOT NULL
);

insert into Course values(1,'CSE',2,'abc');
insert into Course values(2,'CSE',5,'xyz');
insert into Course values(3,'CSE',8,'def');
insert into Course values(4,'CSE',10,'pqr');

select * from Course;
select course_name from Course;
select course_name,course_duration from Course;

// ALTER COMMAND (DDL)

CREATE TABLE person123(
    Pid int PRIMARY KEY,
    pname varchar(12) not null,
    age number(3) check(age>18)
);

insert into person123 values(1,'ram',20);
insert into person123 values(2,'shyam',25);
insert into person123 values(3,'mohan',19);

select * from person123;

ALTER TABLE person123 add Subject varchar(25) not null;
ALTER TABLE person123 DROP pname;
ALTER TABLE person123 MODIFY Subject char(10);
// we can insert NULL multiple times

ALTER TABLE person123 DROP PRIMARY KEY;

ALTER TABLE person123 ADD PRIMARY KEY(Pid);

ALTER TABLE person123 RENAME COLUMN Subject TO Sub;

RENAME person123 to personNEW;
Output:: (Statement processed)

// TRUNCATE 
TRUNCATE TABLE person123; (to delete all the data/values)
(scheme and structure is preserved)

// WHERE CLAUSE
SELECT * FROM personNEW WHERE PID = 2;
select * from Person WHERE name = 'ram';

// EMPLOYEE TABLE
CREATE TABLE employee(
eid int PRIMARY KEY,
name varchar(20) NOT NULL,
salary int ,
department varchar(30)
);

INSERT INTO employee values (1,'ram',100000,'cse');
INSERT INTO employee values (2,'shyam',14000,'mec');
INSERT INTO employee values (3,'mohan',15000,'ece');
INSERT INTO employee values (4,'abc',12000,'che');
INSERT INTO employee values (5,'xyz',8000,'phy');
INSERT INTO employee values (6,'anuj',100000,'cse');
INSERT INTO employee values (7,'aman',15000,'che');
INSERT INTO employee values (8,'raman',10000,'cse');
INSERT INTO employee values (9,'sahil',90000,'mth');
INSERT INTO employee values (10,'sahas',120000,'cse');

// to perform operation on table
select salary*2 from employee;
select (salary+200)*2 from employee;
select salary / 2 from employee;
select salary/2 + 100 from employee;
select salary * 2 - 1000 from employee;
-> any operation on NULL will result in NULL;

// concatenation
SELECT col_name || 'string' || col_name AS OUTPUT from employee;

>> Increase salary by 500 and multiply by 3 for employee working in CSE department
select (salary+500)*3 from employee where department = 'cse' AND name='ram';
select (salary+500)*3 from employee where department = 'cse' OR name='ram';

SELECT distinct department from employee;

// AS command
SELECT eid, name, department as "Details" from employee;
SELECT eid, name, salary/1000 as "Details" from employee;
SELECT eid, name as "Details" from employee;

UPDATE employee set salary = 100 where eid = 1;

select * from employee where salary <> 100000;
select * from employee where salary > 10000;
select * from employee where salary > 10000;
select * from employee where salary BETWEEN 10000 AND 10000;
select * from employee where department IN ('ece','mec',cse');
select * from employee where NAME like 'a%'; (starting with a)
select * from employee where NAME like '%am'; (ending with am)
select * from employee where NAME like '%am%'; (having am)
select * from employee where NAME like '_i%'; (second alphabet)
select * from employee where NAME like 'i_%'; (second last alphabet)
select * from employee where eid >=2 or salary < 12000;
select * from employee where eid >=2 and salary in (10000,12000);
select * from employee order by salary;
select * from employee order by salary desc;
select * from employee where eid>=5 or salary = 10000 and department in ('cse','mec') ;

// TCL (Transaction Control Language)
> commit => permanent change
> savepoint => a breakpoint
> rollback => moving to some particular breakpoint, if breakpoint name is not mentioned rollback will occur to initial state

// DCL
> Grant => giving permission
> Revoke => taking permission

TODO:
Aggregate function
having CLAUSE
group by

// Aggregate function
sum, min, max, average => works on integer only
count can work on any data type
select min(salary) from Employee;
select max(salary) from Employee;
select avg(salary) from Employee;
select sum(salary) from Employee;
select count (eid) from Employee;
select count (distinct eid) from Employee;

select * from Employee;

INSERT INTO employee values (11,'rohan',50000,'cse');
INSERT INTO employee values (12,'sohan',60000,'ece');

select min(salary) from Employee;
select max(salary) from Employee;
select sum(salary) from Employee;
select avg(salary) from Employee;
select count (eid) from Employee;

select count(distinct department ) from Employee;
select count (salary) from Employee where department <> 'cse';
select count (salary) from Employee where eid >=5 and salary>=1000;
select * from Employee where salary between 40000 and 60000;
select * from Employee where salary = 40000 or eid = 2 and eid = 4;

// 3 types of ~ / not operator
select * from Employee where salary NOT in (60000);
select * from Employee where salary <> 60000;
select * from Employee where not salary = 60000;

>> update salary to 50000 where deptid = 1

update Employee set salary = 50000 where eid = 1;
select * from Employee where eid = 1;

// SET operations 
UNION 
UNION ALL 
INTERSECT
MINUS
same number of cols, same data_type, similar columns
at least 2 tables

CREATE TABLE first(
id int ,
name varchar(20)
);

insert into first values(1,'amit');
insert into first values(2,'aman');
insert into first values(3,'arun');

CREATE TABLE second(
id int ,
name varchar(20)
);

insert into second values(4,'namit');
insert into second values(5,'sumit');
insert into second values(6,'suman');

select * from first union select * from second; // will eliminate duplicate 
select * from first union all select * from second; // will not eliminate duplicates

select * from first INTERSECTION select * from second; // common part
select * from first MINUS select * from second; // not of common part / other than common data

>> find avg salary where emp name starting with `a`

// to create a view
CREATE OR REPLACE view v1 as select name,salary,eid from Employee where id=3;
select * from v1;

update v1 set salary = 25000 where eid = 3;
drop view view_name;

// joins=> to join two tables
data type need to be same as well as number of rows also
type->
CARTESIAN / cross join
inner / equi join
natural outer
left  outer
right full outer

create table class1(
    int id,
    name varchar(20)
);
insert into table1 values(1,'ankit')
insert into table1 values(2,'ankita')
insert into table1 values(3,'anu')

create table class2(
id int,
address varchar2(20)
);

insert into class2 values(1,'delhi')
insert into class2 values(2,'agra')
insert into class2 values(3,'jalandhar')

cross join
select * from class1 cross join class2;
// matches each col of first table with each col of second table

inner/equi join 
// matches only the rows with equal values with a condition row with same values displayed twice
select * from class1 inner join class2 on class2.id = class1.id;

select * from class1 inner join class2 on class2.id = class1.id;

natural join
// works same as equi join w/o any condition given by user
// no duplicates
select * from class1 natural join class2;

left outer join
select * from class1 left outer join class2 on class1.id = class2.id;
// all the left rows should be displayed
null for non matching rows

right outer join
select * from class1 right outer join class2 on class1.id = class2.id;
// all the right rows should be displayed
null for non matching rows

full outer join
// both the rows will be displayed 


create table class1(
   id int ,
    name varchar(20)
);
insert into class1 values(1,'ankit')
insert into class1 values(2,'ankita')
insert into class1 values(3,'anu')
insert into class1 values(4,'anusha')

create table class2(
id int,
address varchar2(20)
);

insert into class2 values(1,'delhi')
insert into class2 values(2,'agra')
insert into class2 values(3,'jalandhar')

select * from class1;
select * from class2;

select * from class1 cross join class2;
select * from class1 inner join class2 on class2.id = class1.id;
select * from class1 natural join class2;
select * from class1 left outer join class2 on class1.id = class2.id;
select * from class1 right outer join class2 on class1.id = class2.id;
select * from class1 full outer join class2 on class1.id = class2.id;

// group by clause
split phase
apply phase
combiner phase

group by follows where clause
group by preceeds order by
one column is for grouping & another column for Aggregate function

// having clause
to apply condition 
works on group of data

// Queries

create table Emp(
    fname varchar(20),
    lname varchar(20),
    salary int,
    empid int,
    jobid int,
    deptname varchar(20),
    location varchar(20)
);

insert into emp values('ram','sharma',23000,23,56,'cse','pnb');
insert into emp values('sram','arma',26000,25,56,'cse','delhi');
insert into emp values('sham','rma',15000,28,58,'civil','haryana');
insert into emp values('naitik','lang',45000,29,59,'mech','jalandhar');
insert into emp values('ahem','sharma',10000,30,58,'civil','up');

select deptname , avg(salary) from emp group by deptname having avg(salary) >15000;
select deptname , avg(salary) from emp group by jobid having min(salary) >15000;
select jobid, min(salary) from emp group by jobid;
select jobid, min(salary) from emp group by jobid having min(salary) >10000;
select jobid, min(salary) from emp group by jobid having min(salary) >10000 order by jobid;
// order by follows by group by we can't use order by prior to group by

// sub queries
select deptname, avg(salary) from emp group by deptname having avg(salary) = (select min(avg(salary)) from emp group by deptname);
select deptname, min(avg(salary)) from emp group by deptname;

59	45000
56	24500
select jobid ,min(salary) from emp group by jobid having min(salary) > (select min(salary) from emp where jobid=58);
select fname,lname,empid from emp where jobid = (select jobid from emp where empid=25);
select fname, lname , salary from emp where salary > (select salary from emp where fname='SRam');
select fname, lname , salary,deptname from emp where salary in (
select fname,lname,salary,deptname from emp group by deptname);

// More logical operators
ALL
any
is null
EXISTS

// any works like multiple or conditions
select * from emp where salary = any(select salary from emp where salary >15000);

// all is like multiple AND conditions
select deptname from emp where jobid = all(select jobid from emp where jobid = 56);

// exists if any value is present from our list then display 
select salary from emp where exists (select salary from emp);

// check for null value
select * from emp where salary is not null;

// it requires a condition which needs to be true and should return only one value
select deptname from emp where deptname = all (select deptname from emp where jobid=56);

// 12 September
CREATE TABLE table1(id int primary key, name varchar(20), class int);
insert into table1 values(1,'ankit',12);
insert into table1 values(2,'anuj',11);
insert into table1 values(3,'anu',12);

CREATE TABLE table2(id int primary key, name varchar(20), class int);
insert into table1 values(1,'ankit',12);
insert into table1 values(2,'anuj',11);
insert into table1 values(4,'anu',12);

select * from table1 cross join table2;

select * from table1 inner join table2 on table1.id = table2.id;

select * from table1 natural join table2;

select * from table1 left join table2 on table1.id = table2.id;
select * from table2 left join table1 on table1.id = table2.id;


select * from table1 right join table2 on table1.id = table2.id;
select * from table2 right join table1 on table1.id = table2.id;